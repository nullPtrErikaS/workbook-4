// /**
//  * 04-05-01.js - a simple JavaScript file that gets loaded with
//  * page 5 of Workbook 4 (CS559).
//  *
//  * written by Michael Gleicher, January 2019
//  * modified January 2020, February 2021
//  *
//  */

// /**
//  * If you want to read up on JavaScript classes, 
//  * see the tutorial on the class website:
//  * 
//  * https://cs559.github.io/559Tutorials/javascript/oop-in-js-1/
//  */

// let mouseX = 0;
// let mouseY = 0;

// document.addEventListener('mousemove', (event) => {
//     const rect = canvas.getBoundingClientRect();
//     mouseX = event.clientX - rect.left;
//     mouseY = event.clientY - rect.top;
// });

// let obstacles = [
//     { x: 150, y: 150, radius: 50 },
//     { x: 300, y: 300, radius: 75 }
// ];

// let alignmentCheckbox = document.getElementById("alignment");
// let separationCheckbox = document.getElementById("separation");
// let cohesionCheckbox = document.getElementById("cohesion");
// let mouseAttractionCheckbox = document.getElementById("mouseAttraction");

// class Boid {
//     /**
//      * 
//      * @param {number} x    - initial X position
//      * @param {number} y    - initial Y position
//      * @param {number} vx   - initial X velocity
//      * @param {number} vy   - initial Y velocity
//      */
//     constructor(x, y, vx = 1, vy = 0) {
//         this.x = x;
//         this.y = y;
//         this.vx = vx;
//         this.vy = vy;
//         this.color = "blue";
//     }
//     /**
//      * Draw the Boid
//      * @param {CanvasRenderingContext2D} context 
//      */
//     draw(context) {
//         context.save();
//         context.translate(this.x, this.y);
//         context.rotate(Math.atan2(this.vy, this.vx));
//         context.fillStyle = this.color;
//         context.beginPath();
//         context.moveTo(10, 0);
//         context.lineTo(-10, 5);
//         context.lineTo(-10, -5);
//         context.closePath();
//         context.fill();
//         // Draw legs
//         context.strokeStyle = "black";
//         for (let i = 0; i < 4; i++) {
//             context.beginPath();
//             context.moveTo(0, 0);
//             context.lineTo(10 * Math.cos(i * Math.PI / 2 + Math.sin(performance.now() / 1000)), 10 * Math.sin(i * Math.PI / 2 + Math.sin(performance.now() / 1000)));
//             context.stroke();
//         }
//         context.restore();
//     }
//     /**
//      * Perform the "steering" behavior -
//      * This function should update the velocity based on the other
//      * members of the flock.
//      * It is passed the entire flock (an array of Boids) - that includes
//      * "this"!
//      * Note: dealing with the boundaries does not need to be handled here
//      * (in fact it can't be, since there is no awareness of the canvas)
//      * *
//      * And remember, (vx,vy) should always be a unit vector!
//      * @param {Array<Boid>} flock 
//      */
//     steer(flock) {
//         /*
// 		// Note - this sample behavior is just to help you understand
// 		// what a steering function might  do
// 		// all this one does is have things go in circles, rather than
// 		// straight lines
// 		// Something this simple would not count for the advanced points:
// 		// a "real" steering behavior must consider other boids,
// 		// or at least obstacles.
		
//         // a simple steering behavior: 
//         // create a rotation matrix that turns by a small amount
//         // 2 degrees per time step
//         const angle = 2 * Math.PI / 180;
//         const s = Math.sin(angle);
//         const c = Math.cos(angle);

//         let ovx = this.vx;
//         let ovy = this.vy;

//         this.vx =  ovx * c + ovy * s;
//         this.vy = -ovx * s + ovy * c;
// 		*/
//         let alignment = { x: 0, y: 0 };
//         let separation = { x: 0, y: 0 };
//         let cohesion = { x: 0, y: 0 };
//         let count = 0;

//         flock.forEach(other => {
            
//             if (this !== other) {
//                 let dx = this.x - other.x;
//                 let dy = this.y - other.y;
//                 let distance = Math.sqrt(dx * dx + dy * dy);
//                 if (distance < 10) {
//                     this.vx = -this.vx;
//                     this.vy = -this.vy;
//                     this.color = "green";
//                     setTimeout(() => this.color = "blue", 500);
//                 }
//             }
//             if (Math.random() < 0.01) {
//                 let angle = (Math.random() - 0.5) * Math.PI / 4;
//                 let s = Math.sin(angle);
//                 let c = Math.cos(angle);
//                 let vx = this.vx;
//                 let vy = this.vy;
//                 this.vx = vx * c - vy * s;
//                 this.vy = vx * s + vy * c;
//             }
            
//         });

//         if (alignmentCheckbox.checked) {
//             const dx = mouseX - this.x;
//             const dy = mouseY - this.y;
//             const distance = Math.sqrt(dx * dx + dy * dy);

//             if (distance > 0) {
//                 const angle = Math.atan2(dy, dx);
//                 const targetVx = Math.cos(angle);
//                 const targetVy = Math.sin(angle);

//                 // Adjust the velocity slightly towards the target velocity
//                 this.vx += (targetVx - this.vx) * 0.05;
//                 this.vy += (targetVy - this.vy) * 0.05;

//                 // Normalize the velocity to maintain constant speed
//                 const speed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);
//                 this.vx /= speed;
//                 this.vy /= speed;
//             }
//         }

//         // Mouse attraction behavior
//         if (mouseAttractionCheckbox.checked) {
//             const dx = mouseX - this.x;
//             const dy = mouseY - this.y;
//             const distance = Math.sqrt(dx * dx + dy * dy);

//             if (distance > 0) {
//                 const angle = Math.atan2(dy, dx);
//                 const targetVx = Math.cos(angle);
//                 const targetVy = Math.sin(angle);

//                 // Adjust the velocity slightly towards the target velocity
//                 this.vx += (targetVx - this.vx) * 0.05;
//                 this.vy += (targetVy - this.vy) * 0.05;

//                 // Normalize the velocity to maintain constant speed
//                 const speed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);
//                 this.vx /= speed;
//                 this.vy /= speed;
//             }
//         }

//         obstacles.forEach(obstacle => {
//             const dx = this.x - obstacle.x;
//             const dy = this.y - obstacle.y;
//             const distance = Math.sqrt(dx * dx + dy * dy);

//             if (distance < obstacle.radius) {
//                 // Simple bounce logic
//                 const angle = Math.atan2(dy, dx);
//                 this.vx = Math.cos(angle);
//                 this.vy = Math.sin(angle);
//                 this.color = "red";
//                 setTimeout(() => this.color = "blue", 500);
//             }
//         });
//     }
// }

// // Drawing obstacles
// function drawObstacles(context) {
//     context.fillStyle = "gray";
//     obstacles.forEach(obstacle => {
//         context.beginPath();
//         context.arc(obstacle.x, obstacle.y, obstacle.radius, 0, 2 * Math.PI);
//         context.fill();
//     });
// }

// /** the actual main program
//  * this used to be inside of a function definition that window.onload
//  * was set to - however, now we use defer for loading
//  */

//  /** @type Array<Boid> */
// let boids = [];

// let canvas = /** @type {HTMLCanvasElement} */ (document.getElementById("flock"));
// let context = canvas.getContext("2d");

// let speedSlider = /** @type {HTMLInputElement} */ (document.getElementById("speed"));

// function draw() {
//     context.clearRect(0, 0, canvas.width, canvas.height);
//     drawObstacles(context);
//     boids.forEach(boid => boid.draw(context));
// }

// /**
//  * Create some initial boids
//  * STUDENT: may want to replace this
//  */
// boids.push(new Boid(100, 100));
// boids.push(new Boid(200, 200, -1, 0));
// boids.push(new Boid(300, 300, 0, -1));
// boids.push(new Boid(400, 400, 0, 1));

// /**
//  * Handle the buttons
//  */
// document.getElementById("add").onclick = function () {
//     for (let i = 0; i < 10; i++) {
//         let x = Math.random() * canvas.width;
//         let y = Math.random() * canvas.height;
//         let angle = Math.random() * 2 * Math.PI;
//         let vx = Math.cos(angle);
//         let vy = Math.sin(angle);
//         boids.push(new Boid(x, y, vx, vy));
//     }
// };
// document.getElementById("clear").onclick = function () {
//     boids = [];
// };

// let lastTime; // will be undefined by default
// /**
//  * The Actual Execution
//  */
// function loop(timestamp) {
//     // time step - convert to 1/60th of a second frames
//     // 1000ms / 60fps
//     const delta = (lastTime ? timestamp-lastTime : 0) * 1000.0/60.0;

//     // change directions
//     boids.forEach(boid => boid.steer(boids));
//     // move forward
//     let speed = Number(speedSlider.value);
//     boids.forEach(function (boid) {
//         boid.x += boid.vx * speed;
//         boid.y += boid.vy * speed;
//     });
//     // make sure that we stay on the screen
//     boids.forEach(function (boid) {
//         if (boid.x < 0 || boid.x > canvas.width || boid.y < 0 || boid.y > canvas.height) {
//             boid.vx = -boid.vx;
//             boid.vy = -boid.vy;
//             boid.color = "red";
//             setTimeout(() => boid.color = "blue", 500);
//         }
//         boid.x = Math.max(0, Math.min(canvas.width, boid.x));
//         boid.y = Math.max(0, Math.min(canvas.height, boid.y));
//     });
//     // now we can draw
//     draw();
//     // and loop
//     window.requestAnimationFrame(loop);

// }
// // start the loop with the first iteration
// window.requestAnimationFrame(loop);


